package com.example.demo.controller;

import com.example.demo.entity.Product;
import com.example.demo.repository.ProductRepository;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.websocket.server.PathParam;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/products")
public class ProductController {

    @Autowired
    private ProductRepository productRepository;


    @ApiOperation(value = "Retrieve a product by id", notes = "The id is an integer")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved product"),
            @ApiResponse(code = 404, message = "No product was found")})
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<Product> getProductsById(@PathVariable("id") Integer id) {
        return productRepository.findById(id).isPresent() ? new ResponseEntity(productRepository.findById(id).get(), HttpStatus.OK) : new ResponseEntity(HttpStatus.NOT_FOUND);
    }

    @ApiOperation(value = "Retrieve a list of products by name", notes = "The name is a string")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved products"),
            @ApiResponse(code = 404, message = "No product was found")})
    @RequestMapping(value = "/", method = RequestMethod.GET)
    public ResponseEntity<List<Product>> getProductsByName(@RequestParam("name") String name) {
        List<Product> productByName = productRepository.findProductByName(name);
        return productByName.size() > 0 ? new ResponseEntity(productByName, HttpStatus.OK) : new ResponseEntity(HttpStatus.NOT_FOUND);
    }

    @ApiOperation(value = "Create a new product", notes = "The id field is ignored if you send it in request. It is autogenerated by the DB")
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Successfully created product")})
    @RequestMapping(value = "/", method = RequestMethod.POST)
    public ResponseEntity<Product> addProduct(@RequestBody Product product) {
        return new ResponseEntity<>(productRepository.save(product), HttpStatus.CREATED);
    }

    @ApiOperation(value = "Update an existing product", notes = "If the product is not found by id, no action happens")
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Product successfully updated"),
            @ApiResponse(code = 404, message = "No product found by id"),
    })
    @RequestMapping(value = "/", method = RequestMethod.PUT)
    public ResponseEntity updateProduct(@RequestBody Product product) {
        Optional<Product> optionalProduct = productRepository.findById(product.getId());
        if (optionalProduct.isPresent()) {
            Product existingProduct = optionalProduct.get();
            existingProduct.setName(product.getName());
            existingProduct.setDescription(product.getDescription());
            return new ResponseEntity(productRepository.save(existingProduct), HttpStatus.CREATED);
        }
        return new ResponseEntity(HttpStatus.NOT_FOUND);
    }
}
